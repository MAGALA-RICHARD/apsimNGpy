{
  "$type": "Models.Core.Simulations, Models",
  "Version": 174,
  "Name": "Simulations",
  "ResourceName": null,
  "Children": [
    {
      "$type": "Models.Storage.DataStore, Models",
      "useFirebird": false,
      "CustomFileName": null,
      "Name": "DataStore",
      "ResourceName": null,
      "Children": [],
      "Enabled": true,
      "ReadOnly": false
    },
    {
      "$type": "Models.Core.Simulation, Models",
      "Descriptors": null,
      "Name": "Simulation",
      "ResourceName": null,
      "Children": [
        {
          "$type": "Models.Clock, Models",
          "Start": "2010-03-01T00:00:00",
          "End": "2012-12-31T00:00:00",
          "Name": "Clock",
          "ResourceName": null,
          "Children": [],
          "Enabled": true,
          "ReadOnly": false
        },
        {
          "$type": "Models.Climate.Weather, Models",
          "ConstantsFile": null,
          "FileName": "%root%/Examples/WeatherFiles/NZ_Lincoln",
          "ExcelWorkSheetName": "",
          "Name": "Weather",
          "ResourceName": null,
          "Children": [],
          "Enabled": true,
          "ReadOnly": false
        },
        {
          "$type": "Models.Summary, Models",
          "Verbosity": 100,
          "Name": "Summary",
          "ResourceName": null,
          "Children": [],
          "Enabled": true,
          "ReadOnly": false
        },
        {
          "$type": "Models.Soils.Arbitrator.SoilArbitrator, Models",
          "Name": "Soil Arbitrator",
          "ResourceName": null,
          "Children": [],
          "Enabled": true,
          "ReadOnly": false
        },
        {
          "$type": "Models.Core.Zone, Models",
          "Area": 1.0,
          "Slope": 0.0,
          "AspectAngle": 0.0,
          "Altitude": 50.0,
          "Name": "Field",
          "ResourceName": null,
          "Children": [
            {
              "$type": "Models.Core.Folder, Models",
              "ShowInDocs": false,
              "GraphsPerPage": 6,
              "Name": "Management",
              "ResourceName": null,
              "Children": [
                {
                  "$type": "Models.Operations, Models",
                  "Operation": [
                    {
                      "$type": "Models.Operation, Models",
                      "Enabled": true,
                      "Date": "2010-03-15",
                      "Action": "[WhiteClover].Sow(population: 500, cultivar: \"Kopu\", depth: 5, rowSpacing: 150)",
                      "Line": "2010-03-15 [WhiteClover].Sow(population: 500, cultivar: \"Kopu\", depth: 5, rowSpacing: 150)"
                    },
                    {
                      "$type": "Models.Operation, Models",
                      "Enabled": true,
                      "Date": "2010-03-15",
                      "Action": "[Fertiliser].Apply(Amount: 60, Type: Fertiliser.Types.UreaN, Depth: 10)",
                      "Line": "2010-03-15 [Fertiliser].Apply(Amount: 60, Type: Fertiliser.Types.UreaN, Depth: 10)"
                    }
                  ],
                  "Name": "Sowing",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Operations, Models",
                  "Operation": [
                    {
                      "$type": "Models.Operation, Models",
                      "Enabled": true,
                      "Date": "2011-09-15",
                      "Action": "[Fertiliser].Apply(Amount: 25.0, Type: Fertiliser.Types.UreaN, Depth: 30)",
                      "Line": "2011-09-15 [Fertiliser].Apply(Amount: 25.0, Type: Fertiliser.Types.UreaN, Depth: 30)"
                    },
                    {
                      "$type": "Models.Operation, Models",
                      "Enabled": true,
                      "Date": "2012-09-15",
                      "Action": "[Fertiliser].Apply(Amount: 25.0, Type: Fertiliser.Types.UreaN, Depth: 30)",
                      "Line": "2012-09-15 [Fertiliser].Apply(Amount: 25.0, Type: Fertiliser.Types.UreaN, Depth: 30)"
                    }
                  ],
                  "Name": "FertiliserSchedule",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Manager, Models",
                  "CodeArray": [
                    "using Newtonsoft.Json;",
                    "using Models.PMF.Phen;",
                    "using APSIM.Shared.Utilities;",
                    "using System.Xml.Serialization;",
                    "using Models.Soils;",
                    "using Models.PMF;",
                    "using Models.Core;",
                    "using System.Linq;",
                    "using System;",
                    "using Models.Soils.Nutrients;",
                    "using Models.Interfaces;",
                    "",
                    "        ",
                    "namespace Models",
                    "{",
                    "    [Serializable] ",
                    "    [System.Xml.Serialization.XmlInclude(typeof(Model))]",
                    "    public class Script : Model",
                    "    {",
                    "        [Link] private ISummary summary;",
                    "        [Link] private Irrigation Irrigation;",
                    "        [Link] private Clock Clock;",
                    "        [Link] private Soil Soil;",
                    "        [Link(IsOptional = true)] private Plant existingCrop;",
                    "        private DateTime StartDate;",
                    "        private DateTime EndDate;",
                    "        private double TopDUL;",
                    "        private double TopLL;",
                    "        private int nLayers;",
                    "        [Link(IsOptional = true)]",
                    "        private Phenology phenology;",
                    "        [Link]",
                    "        private IPhysical soilPhysical;",
                    "        [Link]",
                    "        private ISoilWater waterBalance;",
                    "        //Communication to other modules",
                    "       ",
                    "        //User inputs from properties tab",
                    "        [Description(\"Turn irrigation on?\")]",
                    "        public answerType allowIrrigation { get; set; }",
                    "        [Description(\"Start of irrigation season (dd-MMM)\")]",
                    "        public string seasonStart { get; set; }",
                    "        [Description(\"End of irrigation season (dd-MMM)\")]",
                    "        public string seasonEnd { get; set; }",
                    "        [Description(\"Season allocation (mm)\")]",
                    "        public double seasonsAllocation { get; set; }",
                    "        [Description(\"Deficit to trigger irrigation (% PAWC)\")]",
                    "        public double triggerDeficit { get; set; }",
                    "        [Description(\"Deficit to stop irrigaton (% PAWC)\")]",
                    "        public double targetDeficit { get; set; }",
                    "        [Description(\"Minimum days for irrigation to return\")]",
                    "        public double returndays { get; set; }",
                    "        [Description(\"Maximum irrigation application (mm/day)\")]",
                    "        public double maximumAmount { get; set; }",
                    "        [Description(\"Depth to calculate PAWC (mm)\")]",
                    "        public double depthPAWC { get; set; }",
                    "       ",
                    "        public enum answerType",
                    "        {",
                    "            /// <summary>a positive answer</summary>",
                    "            yes,",
                    "            /// <summary>a negative answer</summary>",
                    "            no",
                    "        }",
                    "",
                    "        //Class members",
                    "        [JsonIgnore] public double TopSWdeficit { get; set; }",
                    "        [JsonIgnore] public double TopSWC { get; set; }",
                    "        [JsonIgnore] public double DaysSinceIrrigation { get; set; }",
                    "        [JsonIgnore] public double AmountToApply { get; set; }",
                    "        [JsonIgnore] public double SeasonAppliedAmount { get; set; }",
                    "        ",
                    "        private bool IrrigationIsAllowed { get; set; }",
                    "        private bool SeasonIsOpen { get; set; }",
                    "        private bool CropIsActive { get; set; }",
                    "        private bool IrrigatorIsAvailable { get; set; }",
                    "        private bool SoilIsDry { get; set; }",
                    "",
                    "    ",
                    "        //Calculate static soil variables",
                    "        [EventSubscribe(\"StartOfSimulation\")]",
                    "        private void OnStartOfSimulation(object sender, EventArgs e)",
                    "        {   ",
                    "            //Set the season dates",
                    "            StartDate = DateTime.Parse(seasonStart + \"-\" + Clock.Today.Year.ToString());",
                    "            EndDate = DateTime.Parse(seasonEnd + \"-\" + Clock.Today.Year.ToString());",
                    "            ",
                    "            //Can we irrigate at all?",
                    "            IrrigationIsAllowed = false; ",
                    "            if (allowIrrigation == answerType.yes)",
                    "                IrrigationIsAllowed = true; ",
                    "",
                    "            //Calculate soil water variables",
                    "            double depthFromSurface = 0.0;",
                    "            double fracLayer = 0.0;",
                    "            nLayers = soilPhysical.Thickness.Length;",
                    "            for (int layer = 0; layer < nLayers; layer++)",
                    "            {",
                    "                fracLayer = Math.Min(1.0, (depthPAWC - depthFromSurface) / soilPhysical.Thickness[layer]);",
                    "                TopLL += soilPhysical.LL15mm[layer] * fracLayer;",
                    "                TopDUL += soilPhysical.DULmm[layer] * fracLayer;",
                    "                depthFromSurface += soilPhysical.Thickness[layer];",
                    "                if (depthFromSurface >= depthPAWC)",
                    "                    layer = nLayers;",
                    "            }",
                    "        }",
                    "             ",
                    "        //Determine daily requirement for irrigation",
                    "        [EventSubscribe(\"StartOfDay\")]",
                    "        private void OnStartOfDay(object sender, EventArgs e)",
                    "        {",
                    "            //Can we irrigate today?          ",
                    "            SeasonIsOpen = isBetween(Clock.Today, StartDate, EndDate);",
                    "",
                    "            //Is there a crop in the ground that needs irrigation?",
                    "            CropIsActive = false;",
                    "            if ((existingCrop != null) && (existingCrop.IsAlive))",
                    "                CropIsActive = true;",
                    "            //if ((phenology.Stage >= 3.0) && (phenology.Stage < 6.0))",
                    "          ",
                    "            //Is the irrigator available?",
                    "            IrrigatorIsAvailable = false;",
                    "            DaysSinceIrrigation += 1;",
                    "            if (DaysSinceIrrigation >= returndays)",
                    "                IrrigatorIsAvailable = true;",
                    "          ",
                    "            //Is the soil dry enough to require irrigation?",
                    "            SoilIsDry = false;",
                    "            double depthFromSurface = 0.0;",
                    "            double fracLayer = 0.0;",
                    "            TopSWC = 0.0;",
                    "            for (int layer = 0; layer < nLayers; layer++)",
                    "            {",
                    "                fracLayer = Math.Min(1.0, (depthPAWC - depthFromSurface) / soilPhysical.Thickness[layer]);",
                    "                TopSWC += waterBalance.SWmm[layer] * fracLayer;",
                    "                depthFromSurface += soilPhysical.Thickness[layer];",
                    "                if (depthFromSurface >= depthPAWC)",
                    "                    layer = nLayers;",
                    "            }",
                    "            ",
                    "            TopSWdeficit = TopSWC - TopDUL;",
                    "            if (Math.Max(0.0, -TopSWdeficit) >= (TopDUL - TopLL) * (100 - triggerDeficit) / 100)",
                    "                SoilIsDry = true;",
                    "                ",
                    "            //Are all the conditions ratifying irrigation",
                    "            if (IrrigationIsAllowed && SeasonIsOpen && CropIsActive && IrrigatorIsAvailable && SoilIsDry)",
                    "            {",
                    "                //Lets bloody well irrigate then!!!!",
                    "                AmountToApply = TopDUL * targetDeficit / 100 - TopSWC;",
                    "                //AmountToApply = Math.Max(0.0, Math.Min(AmountToApply, seasonsAllocation - SeasonAppliedAmount));",
                    "                AmountToApply = maximumAmount;",
                    "                Irrigation.Apply(AmountToApply);",
                    "                DaysSinceIrrigation = 0;",
                    "                SeasonAppliedAmount += AmountToApply;",
                    "            }",
                    "        }",
                    "        ",
                    "        ///Checks whether theDate is between iniDate and endDate (non-year specific)",
                    "        private bool isBetween(DateTime theDay, DateTime iniDate, DateTime endDate)",
                    "        {",
                    "            bool result = false;",
                    "            if (iniDate.DayOfYear < endDate.DayOfYear)",
                    "            {",
                    "                // period is within one year, ex: summer in the northern hemisphere",
                    "                if ((theDay.DayOfYear >= iniDate.DayOfYear) && (theDay.DayOfYear <= endDate.DayOfYear))",
                    "                    result = true;",
                    "            }",
                    "            else",
                    "            {",
                    "                // period goes over the end of the year, ex: summer in the southern hemisphere",
                    "                if ((theDay.DayOfYear >= iniDate.DayOfYear) || (theDay.DayOfYear <= endDate.DayOfYear))",
                    "                    result = true;",
                    "            }",
                    "            ",
                    "            return result;",
                    "        }",
                    "    }",
                    "}"
                  ],
                  "Parameters": [
                    {
                      "Key": "allowIrrigation",
                      "Value": "yes"
                    },
                    {
                      "Key": "seasonStart",
                      "Value": "15-Sep"
                    },
                    {
                      "Key": "seasonEnd",
                      "Value": "30-Apr"
                    },
                    {
                      "Key": "seasonsAllocation",
                      "Value": "10000"
                    },
                    {
                      "Key": "triggerDeficit",
                      "Value": "75"
                    },
                    {
                      "Key": "targetDeficit",
                      "Value": "95"
                    },
                    {
                      "Key": "returndays",
                      "Value": "3"
                    },
                    {
                      "Key": "maximumAmount",
                      "Value": "15"
                    },
                    {
                      "Key": "depthPAWC",
                      "Value": "500"
                    }
                  ],
                  "Name": "AutomaticIrrigation",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Manager, Models",
                  "CodeArray": [
                    "// Defoliates on a regular cycle or one-off via a schedule",
                    "// currently defoliates by the amount specified spread evenly over the specified period",
                    "",
                    "using Models.PMF.Interfaces;",
                    "using Models.Soils.Nutrients;",
                    "using System;",
                    "using System.Linq;",
                    "using Models.Core;",
                    "using System.Collections.Generic;",
                    "using System.Text;",
                    "using Models;",
                    "using Models.Soils;",
                    "using Models.PMF;",
                    "using System.Xml.Serialization;",
                    "using APSIM.Shared.Utilities;",
                    "using Newtonsoft.Json;",
                    "",
                    "namespace Models",
                    "{",
                    "    [Serializable]",
                    "    public class Script : Model",
                    "    {",
                    "        [Link] Zone zone;",
                    "        [Link] Clock Clock;",
                    "        [Link] Plant WhiteClover;",
                    "        [Link] Fertiliser fertiliser;",
                    "        [Link] ISummary summary = null;",
                    "",
                    "        [Description(\"Choose the crop to harvest:\")]",
                    "        public IPlant Crop { get; set; }",
                    "",
                    "        [Description(\"Enter the date to start the rotation (dd/mm/yyyy):\")]",
                    "        public DateTime cutPasture_StartDate { get; set; }",
                    "",
                    "        [Description(\"Enter the date to end the rotation (dd/mm/yyyy):\")]",
                    "        public DateTime cutPasture_EndDate { get; set; }",
                    "",
                    "        [Description(\"Select type of defoliation:\")]",
                    "        public defoliationTypes defoliateType { get; set; }",
                    "",
                    "        [Description(\"Enter the interval between defoliations (days):\")]",
                    "        public int interval2Cut { get; set; }",
                    "",
                    "        [Description(\"Enter the number of days to defoliate over (days):\")]",
                    "        public int durationOfCut { get; set; }",
                    "",
                    "        [Description(\"Choose what amount is being defined:\")]",
                    "        public removeAmountTypes removeAmountType { get; set; }",
                    "",
                    "        [Description(\"Enter the amount to use (kgDM/ha):\")]",
                    "        public double herbageAmount { get; set; }",
                    "",
                    "        [Description(\"Enter the fraction of DM that is removed from the field (0-1):\")]",
                    "        public double fracDM2Remove { get; set; }",
                    "",
                    "        [Description(\"Enter the fraction of N that is removed from the field (0-1):\")]",
                    "        public double fracN2Remove { get; set; }",
                    "",
                    "        [Description(\"Enter the depth down to which urine will applied (mm):\")]",
                    "        public double urineDepth { get; set; }",
                    "",
                    "        [Description(\"Enter the proportion of N returned in dung (0-1):\")]",
                    "        public double fracN2Dung { get; set; }",
                    "",
                    "        [Description(\"Enter the fraction of population decline due to defoliation (0-1):\")]",
                    "        public double fracPopDecline { get; set; }",
                    "",
                    "        //fraction of each plant part returned as residue (0-1), wastage",
                    "        private double leafResidueFrac = 0.01;",
                    "        private double petioleResidueFrac = 0.01;",
                    "        private double stolonResidueFrac = 0.01;",
                    "        private double flowerResidueFrac = 0.01;",
                    "        private double minLeafAmount = 5.0;",
                    "",
                    "        //Outputs",
                    "        //Pasture DM defoliated today (kg/ha)",
                    "        [JsonIgnore] public double DefoliatedDM{ get; set; }",
                    "        //N defoliate today",
                    "        [JsonIgnore] public double DefoliatedN{ get; set; }",
                    "        //Pasture DM harvested today (kg/ha)",
                    "        [JsonIgnore] public double HarvestedDM{ get; set; }",
                    "        //N harvested today",
                    "        [JsonIgnore] public double HarvestedN{ get; set; }",
                    "        //DM removed from the paddock",
                    "        [JsonIgnore] public double RemovedDM{ get; set; }",
                    "        //N removed from the paddock",
                    "        [JsonIgnore] public double RemovedN{ get; set; }",
                    "        //DM returned to the paddock",
                    "        [JsonIgnore] public double ReturnedDM{ get; set; }",
                    "        //N returned to the paddock",
                    "        [JsonIgnore] public double ReturnedN{ get; set; }",
                    "        //N returned as dung (SurfaceOM)",
                    "        [JsonIgnore] public double NReturnedInDung{ get; set; }",
                    "        //N returned as urine (urea)",
                    "        [JsonIgnore] public double NReturnedInUrine{ get; set; }",
                    "        //Number of days after last harvest",
                    "        [JsonIgnore] public int DaysAfterCut{ get; set; }",
                    "        //Total standing DM (Leaf + Stem/Sheath) before cut",
                    "        [JsonIgnore] public double PreHarvestDM{ get; set; }",
                    "        //Total standing DM (Leaf + Stem/Sheath) after cut",
                    "        [JsonIgnore] public double PostHarvestDM{ get; set; }",
                    "",
                    "        //Pasture DM harvested this rotation (kg/ha)",
                    "        [JsonIgnore] public double RotationHarvestedDM{ get; set; }",
                    "        //Pasture DM to be harvested this rotation (kg/ha)",
                    "        [JsonIgnore] public double RotationHarvestingDM{ get; set; }",
                    "",
                    "        //Internal variables",
                    "",
                    "        //The fraction of urine to be applied in each layer",
                    "        private double[] FracLayer;",
                    "        // total herbage to remove in g/m2 per day",
                    "        private double herbageToRemove;",
                    "        // counter",
                    "        private int daysCutting = 0;",
                    "        // type of defoliation (Cut or Graze)",
                    "        private string defoliationType;",
                    "        // type of DM amount (ResidualDM or DMToRemove)",
                    "        private string amountType;",
                    "        // auxiliary",
                    "        private bool aCutHasHappened = false;",
                    "        private bool isStillCutting = false;",
                    "        private double cumAmountHarvested;",
                    "",
                    "        // event to add residue / dung to surface OM",
                    "        public event BiomassRemovedDelegate BiomassRemoved;",
                    "",
                    "        [EventSubscribe(\"StartOfSimulation\")]",
                    "        private void OnSimulationCommencing(object sender, EventArgs e)",
                    "        {",
                    "            ",
                    "            DaysAfterCut = 0;",
                    "            resetVariables();",
                    "            if (defoliateType == defoliationTypes.Cut)",
                    "                defoliationType = \"Cut\";",
                    "            else",
                    "                defoliationType = \"Graze\";",
                    "",
                    "            if (removeAmountType == removeAmountTypes.ResidualDM)",
                    "                amountType = \"ResidualDM\";",
                    "            else",
                    "                amountType = \"DMToRemove\";",
                    "",
                    "            // make sure that rotation start when startDate<simulationStartDay",
                    "            if ((Clock.Today > cutPasture_StartDate) && (Clock.Today < cutPasture_EndDate))",
                    "                cutPasture_StartDate = Clock.Today;",
                    "        }",
                    "",
                    "        [EventSubscribe(\"DoManagement\")]",
                    "        private void OnDoManagement(object sender, EventArgs e)",
                    "        {",
                    "            if (Clock.Today == cutPasture_StartDate)",
                    "                DaysAfterCut = interval2Cut;",
                    "",
                    "            if ((Clock.Today >= cutPasture_StartDate) && (Clock.Today <= cutPasture_EndDate))",
                    "            {",
                    "                // Check whether we should start cutting",
                    "                if ((WhiteClover.IsEmerged) && (DaysAfterCut > 0) && (DaysAfterCut == interval2Cut))",
                    "                {",
                    "                    Defoliate(defoliationType, herbageAmount * 0.1, amountType, durationOfCut);",
                    "                }",
                    "            }",
                    "",
                    "            // Check whether we need to continue cutting",
                    "            //if ((daysCutting > 0) && (daysCutting <= durationOfCut))",
                    "            if (isStillCutting)",
                    "            {",
                    "                // reset outputs",
                    "                resetVariables();",
                    "",
                    "                removeDM(herbageToRemove, defoliationType);",
                    "                returnExcreta();",
                    "                cumAmountHarvested += HarvestedDM;",
                    "                daysCutting += 1;",
                    "            }",
                    "",
                    "            // reset outputs",
                    "            if (daysCutting < 0)",
                    "            {",
                    "                resetVariables();",
                    "                daysCutting = 0;",
                    "            }",
                    "        }",
                    "",
                    "        [EventSubscribe(\"DoManagementCalculations\")]",
                    "        private void OnDoManagementCalculations(object sender, EventArgs e)",
                    "        {",
                    "            if ((daysCutting > 0) && (daysCutting < durationOfCut))",
                    "                isStillCutting = true;",
                    "",
                    "            if (daysCutting == durationOfCut)",
                    "            {",
                    "                PostHarvestDM = (double)zone.Get(\"WhiteClover.AboveGround.Wt\");",
                    "                RotationHarvestedDM = cumAmountHarvested;",
                    "                aCutHasHappened = true;",
                    "                isStillCutting = false;",
                    "                daysCutting = -1;",
                    "                WhiteClover.Population = WhiteClover.Population * (1.0 - fracPopDecline);",
                    "            }",
                    "",
                    "            if (aCutHasHappened && (daysCutting == 0))",
                    "                DaysAfterCut += 1;",
                    "        }",
                    "",
                    "        public enum removeAmountTypes",
                    "        {",
                    "            /// <summary>Setting DM amount to remove</summary>",
                    "            DMToRemove,",
                    "            /// <summary>Setting residual DM amount</summary>",
                    "            ResidualDM",
                    "        }",
                    "",
                    "        public enum defoliationTypes",
                    "        {",
                    "            /// <summary>Cut</summary>",
                    "            Cut,",
                    "            /// <summary>Graze</summary>",
                    "            Graze",
                    "        }",
                    "",
                    "        // resets the values of all outputs",
                    "        private void resetVariables()",
                    "        {",
                    "            DefoliatedDM = 0.0;",
                    "            DefoliatedN = 0.0;",
                    "            HarvestedDM = 0.0;",
                    "            HarvestedN = 0.0;",
                    "            RemovedDM = 0.0;",
                    "            RemovedN = 0.0;",
                    "            ReturnedDM = 0.0;",
                    "            ReturnedN = 0.0;",
                    "            NReturnedInDung = 0.0;",
                    "            NReturnedInUrine = 0.0;",
                    "            RotationHarvestedDM = 0.0;",
                    "            RotationHarvestingDM = 0.0;",
                    "        }",
                    "",
                    "        // Perform the basic calculations for defoliation",
                    "        public void Defoliate(string defoliationType, double amountDM, string amountType, int duration)",
                    "        {",
                    "            // get the existing plant amount",
                    "            PreHarvestDM = (double)zone.Get(\"WhiteClover.AboveGround.Wt\");",
                    "",
                    "            // check duration",
                    "            if (duration <= 0)",
                    "                throw new Exception(\"Duration of graze/cut rotation is zero or negative\");",
                    "            ",
                    "            // check amount to remove",
                    "            if ((amountType == \"DMToRemove\") && (PreHarvestDM > 0.0))",
                    "            {",
                    "                summary.WriteMessage(this, \"   Defoliating \" + (10.0 * amountDM).ToString(\"#0.0\") + \"kg/ha over \" + duration + \" days\", MessageType.Diagnostic);",
                    "                herbageToRemove = amountDM / duration;",
                    "            }",
                    "            else if ((amountType == \"ResidualDM\") && (PreHarvestDM > amountDM))",
                    "            {",
                    "                summary.WriteMessage(this, \"   Defoliating down to approximately \" + (10.0 * amountDM).ToString(\"#0.0\") + \"kg/ha over \" + duration + \" days\", MessageType.Diagnostic);",
                    "                herbageToRemove = (PreHarvestDM - amountDM) / duration;",
                    "            }",
                    "            else",
                    "            {",
                    "                herbageToRemove = 0.0;",
                    "                summary.WriteMessage(this, \"   Defoliation will not happend because there is not enough plant material\", MessageType.Diagnostic);",
                    "                return;",
                    "            }",
                    "",
                    "            RotationHarvestingDM = herbageToRemove * duration;",
                    "            durationOfCut = duration;",
                    "            // first defoliation",
                    "            removeDM(herbageToRemove, defoliationType);",
                    "            returnExcreta();",
                    "            cumAmountHarvested = HarvestedDM;",
                    "            daysCutting = 1;",
                    "            DaysAfterCut = 0;",
                    "        }",
                    "",
                    "        private void removeDM(double removeAmount, string removeType)",
                    "        {",
                    "            // get the existing biomass",
                    "            double leafLiveWt = (double)zone.Get(\"WhiteClover.Leaf.Live.Wt\");",
                    "            double petioleLiveWt = (double)zone.Get(\"WhiteClover.Petiole.Live.Wt\");",
                    "            double stolonLiveWt = (double)zone.Get(\"WhiteClover.Stolon.Live.Wt\");",
                    "            double flowerLiveWt = (double)zone.Get(\"WhiteClover.Inflorescence.Live.Wt\");",
                    "            double leafDeadWt = (double)zone.Get(\"WhiteClover.Leaf.Dead.Wt\");",
                    "            double petioleDeadWt = (double)zone.Get(\"WhiteClover.Petiole.Dead.Wt\");",
                    "            double stolonDeadWt = (double)zone.Get(\"WhiteClover.Stolon.Dead.Wt\");",
                    "            double flowerDeadWt = (double)zone.Get(\"WhiteClover.Inflorescence.Dead.Wt\");",
                    "            double leafLiveN = (double)zone.Get(\"WhiteClover.Leaf.Live.N\");",
                    "            double petioleLiveN = (double)zone.Get(\"WhiteClover.Petiole.Live.N\");",
                    "            double stolonLiveN = (double)zone.Get(\"WhiteClover.Stolon.Live.N\");",
                    "            double flowerLiveN = (double)zone.Get(\"WhiteClover.Inflorescence.Live.N\");",
                    "            double leafDeadN = (double)zone.Get(\"WhiteClover.Leaf.Dead.N\");",
                    "            double petioleDeadN = (double)zone.Get(\"WhiteClover.Petiole.Dead.N\");",
                    "            double stolonDeadN = (double)zone.Get(\"WhiteClover.Stolon.Dead.N\");",
                    "            double flowerDeadN = (double)zone.Get(\"WhiteClover.Inflorescence.Dead.N\");",
                    "",
                    "            double existingWt = leafLiveWt + leafDeadWt + petioleLiveWt + petioleDeadWt + stolonLiveWt + stolonDeadWt + flowerLiveWt + flowerDeadWt;",
                    "            double existingN = leafLiveN + leafDeadN + petioleLiveN + petioleDeadN + stolonLiveN + stolonDeadN + flowerLiveN + flowerDeadN;",
                    "",
                    "            // Can we harvest anything?",
                    "            double removingWt = Math.Min(existingWt, removeAmount);",
                    "            if (removingWt > 0.0)",
                    "            {",
                    "                // get the fractions to remove for each organ (will override the default values)",
                    "                // the default is [WhiteClover].Leaf.BiomassRemovalDefaults.Cut.FractionRemoved, or equivalent",
                    "                // >> double leafFracToRemove = removeAmount * (leafLiveWt + leafDeadWt) / existingWt / existingWt;",
                    "                double fracToRemove = removingWt / existingWt;",
                    "                double leafFracToRemove = 0.0;",
                    "                if ((leafLiveWt + leafDeadWt) > 0.0)",
                    "                {",
                    "                    if (leafLiveWt < minLeafAmount)",
                    "                    {",
                    "                        // leafWt cannot go below a minimum",
                    "                        leafFracToRemove = (removingWt + leafLiveWt - minLeafAmount) / existingWt;",
                    "                    }",
                    "                    else",
                    "                        leafFracToRemove = fracToRemove;",
                    "                }",
                    "",
                    "                double petioleFracToRemove = ((petioleLiveWt + petioleDeadWt) > 0.0) ? fracToRemove : 0.0;",
                    "                double stolonFracToRemove = ((stolonLiveWt + stolonDeadWt) > 0.0) ? fracToRemove : 0.0;",
                    "                double flowerFracToRemove = ((flowerLiveWt + flowerDeadWt) > 0.0) ? fracToRemove : 0.0;",
                    "",
                    "                // get the fractions to residue (i.e. wastage - will override the default values)",
                    "                // the default is [WhiteClover].Leaf.BiomassRemovalDefaults.Cut.FractionToResidue, or equivalent",
                    "                double leafFracToResidue = leafResidueFrac * leafFracToRemove;",
                    "                double petioleFracToResidue = petioleResidueFrac * petioleFracToRemove;",
                    "                double stolonFracToResidue = stolonResidueFrac * stolonFracToRemove;",
                    "                double flowerFracToResidue = flowerResidueFrac * flowerFracToRemove;",
                    "",
                    "                // correct the values to defoliate (so our removing = remove + residue)",
                    "                leafFracToRemove -= leafFracToResidue;",
                    "                petioleFracToRemove -= petioleFracToResidue;",
                    "                stolonFracToRemove -= stolonFracToResidue;",
                    "                flowerFracToRemove -= flowerFracToResidue;",
                    "",
                    "                // set removal fractions (these overrides the default removals in the plant)",
                    "                // Actually do the biomass removal",
                    "                var Leaf = WhiteClover.FindChild<IHasDamageableBiomass>(\"Leaf\");",
                    "                var Petiole = WhiteClover.FindChild<IHasDamageableBiomass>(\"Petiole\");",
                    "                var Stolon = WhiteClover.FindChild<IHasDamageableBiomass>(\"Stolon\");",
                    "                var Inflorescence = WhiteClover.FindChild<IHasDamageableBiomass>(\"Inflorescence\");",
                    "                var Root = WhiteClover.FindChild<IHasDamageableBiomass>(\"Root\");",
                    "                var Taproot = WhiteClover.FindChild<IHasDamageableBiomass>(\"Taproot\");",
                    "                Leaf.RemoveBiomass(liveToRemove: leafFracToRemove, deadToRemove: 0.0, liveToResidue: leafFracToResidue, deadToResidue: 0.0);",
                    "                Petiole.RemoveBiomass(liveToRemove: petioleFracToRemove, deadToRemove: 0.0, liveToResidue: petioleFracToResidue, deadToResidue: 0.0);",
                    "                Stolon.RemoveBiomass(liveToRemove: stolonFracToRemove, deadToRemove: 0.0, liveToResidue: stolonFracToResidue, deadToResidue: 0.0);",
                    "                Inflorescence.RemoveBiomass(liveToRemove: flowerFracToRemove, deadToRemove: 0.0, liveToResidue: flowerFracToResidue, deadToResidue: 0.0);",
                    "                Root.RemoveBiomass(liveToRemove: 0.0, deadToRemove: 0.0, liveToResidue: 0.0, deadToResidue: 0.0);",
                    "                Taproot.RemoveBiomass(liveToRemove: 0.0, deadToRemove: 0.0, liveToResidue: 0.0, deadToResidue: 0.0);",
                    "",
                    "",
                    "                // get the new existing plant amount",
                    "                double postHarvestWt = (double)zone.Get(\"WhiteClover.AboveGround.Wt\");",
                    "                double postHarvestN = (double)zone.Get(\"WhiteClover.AboveGround.N\");",
                    "",
                    "                // get total defoliation (total plant stuff lost)",
                    "                DefoliatedDM = existingWt - postHarvestWt;",
                    "                DefoliatedN = existingN - postHarvestN;",
                    "",
                    "                // get total harvested (plant stuff removed from plants)",
                    "                HarvestedDM = (double)zone.Get(\"WhiteClover.Leaf.Removed.Wt\")",
                    "                + (double)zone.Get(\"WhiteClover.Petiole.Removed.Wt\")",
                    "                + (double)zone.Get(\"WhiteClover.Stolon.Removed.Wt\")",
                    "                + (double)zone.Get(\"WhiteClover.Inflorescence.Removed.Wt\");",
                    "                HarvestedN = (double)zone.Get(\"WhiteClover.Leaf.Removed.N\")",
                    "                + (double)zone.Get(\"WhiteClover.Petiole.Removed.N\")",
                    "                + (double)zone.Get(\"WhiteClover.Stolon.Removed.N\")",
                    "                + (double)zone.Get(\"WhiteClover.Inflorescence.Removed.N\");",
                    "",
                    "                // get amounts actually removed from field and that to be returned (residue or dung/urine)",
                    "                RemovedDM = HarvestedDM * fracDM2Remove;",
                    "                RemovedN = HarvestedN * fracN2Remove;",
                    "                ReturnedDM = HarvestedDM - RemovedDM;",
                    "                ReturnedN = HarvestedN - RemovedN;",
                    "                NReturnedInDung = ReturnedN * fracN2Dung;",
                    "                NReturnedInUrine = ReturnedN - NReturnedInDung;",
                    "            }",
                    "            else",
                    "            {",
                    "            }",
                    "        }",
                    "",
                    "        // Return dung and urine",
                    "        private void returnExcreta()",
                    "        {",
                    "            if ((ReturnedDM > 0.0) || (NReturnedInDung > 0.0))",
                    "            {",
                    "                PMF.BiomassRemovedType BiomassDung = new PMF.BiomassRemovedType();",
                    "                string[] type = new string[] { \"RuminantDung_PastureFed\" };",
                    "                float[] dltdm = new float[] { (Single)ReturnedDM };",
                    "                float[] dltn = new float[] { (Single)NReturnedInDung };",
                    "                float[] dltp = new float[] { 0 };",
                    "                float[] fraction = new float[] { 1 };     // fraction is always 1.0 here",
                    "",
                    "                BiomassDung.crop_type = \"RuminantDung_PastureFed\";",
                    "                BiomassDung.dm_type = type;",
                    "                BiomassDung.dlt_crop_dm = dltdm;",
                    "                BiomassDung.dlt_dm_n = dltn;",
                    "                BiomassDung.dlt_dm_p = dltp;",
                    "                BiomassDung.fraction_to_residue = fraction;",
                    "                BiomassRemoved.Invoke(BiomassDung);",
                    "            }",
                    "",
                    "            if (NReturnedInUrine > 0.0)",
                    "            {",
                    "                fertiliser.Apply(NReturnedInUrine * 10, Fertiliser.Types.UreaN, urineDepth);",
                    "            }",
                    "        }",
                    "    }",
                    "}"
                  ],
                  "Parameters": [
                    {
                      "Key": "Crop",
                      "Value": ".Simulations.WhiteClover.Field.WhiteClover"
                    },
                    {
                      "Key": "cutPasture_StartDate",
                      "Value": "2011-01-01"
                    },
                    {
                      "Key": "cutPasture_EndDate",
                      "Value": "2100-12-31"
                    },
                    {
                      "Key": "defoliateType",
                      "Value": "Graze"
                    },
                    {
                      "Key": "interval2Cut",
                      "Value": "45"
                    },
                    {
                      "Key": "durationOfCut",
                      "Value": "1"
                    },
                    {
                      "Key": "removeAmountType",
                      "Value": "ResidualDM"
                    },
                    {
                      "Key": "herbageAmount",
                      "Value": "500"
                    },
                    {
                      "Key": "fracDM2Remove",
                      "Value": "0.8"
                    },
                    {
                      "Key": "fracN2Remove",
                      "Value": "0.8"
                    },
                    {
                      "Key": "urineDepth",
                      "Value": "10"
                    },
                    {
                      "Key": "fracN2Dung",
                      "Value": "0.4"
                    },
                    {
                      "Key": "fracPopDecline",
                      "Value": "0.05"
                    }
                  ],
                  "Name": "Defoliate",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                }
              ],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.MicroClimate, Models",
              "a_interception": 0.0,
              "b_interception": 1.0,
              "c_interception": 0.0,
              "d_interception": 0.0,
              "SoilHeatFluxFraction": 0.4,
              "MinimumHeightDiffForNewLayer": 0.0,
              "NightInterceptionFraction": 0.5,
              "ReferenceHeight": 2.0,
              "Name": "MicroClimate",
              "ResourceName": null,
              "Children": [],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Irrigation, Models",
              "Name": "Irrigation",
              "ResourceName": null,
              "Children": [],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Fertiliser, Models",
              "Name": "Fertiliser",
              "ResourceName": "Fertiliser",
              "Children": [],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Surface.SurfaceOrganicMatter, Models",
              "SurfOM": [],
              "Canopies": [],
              "InitialResidueName": "grass",
              "InitialResidueType": "grass",
              "InitialResidueMass": 500.0,
              "InitialStandingFraction": 0.0,
              "InitialCPR": 0.0,
              "InitialCNR": 40.0,
              "Name": "SurfaceOrganicMatter",
              "ResourceName": "SurfaceOrganicMatter",
              "Children": [],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Soils.Soil, Models",
              "RecordNumber": 0,
              "ASCOrder": null,
              "ASCSubOrder": null,
              "SoilType": "Generic medium texture",
              "LocalName": null,
              "Site": null,
              "NearestTown": null,
              "Region": "Canterbury",
              "State": null,
              "Country": "New Zealand",
              "NaturalVegetation": null,
              "ApsoilNumber": null,
              "Latitude": 0.0,
              "Longitude": 0.0,
              "LocationAccuracy": null,
              "YearOfSampling": null,
              "DataSource": null,
              "Comments": null,
              "Name": "Soil",
              "ResourceName": null,
              "Children": [
                {
                  "$type": "Models.Soils.Chemical, Models",
                  "Thickness": [
                    150.0,
                    150.0,
                    200.0,
                    250.0,
                    250.0,
                    500.0
                  ],
                  "PH": [
                    6.0,
                    6.0,
                    6.0,
                    6.0,
                    6.0,
                    6.0
                  ],
                  "PHUnits": 0,
                  "EC": null,
                  "ESP": null,
                  "CEC": null,
                  "ECMetadata": null,
                  "CLMetadata": null,
                  "ESPMetadata": null,
                  "PHMetadata": null,
                  "Name": "Chemical",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Soils.Physical, Models",
                  "Thickness": [
                    150.0,
                    150.0,
                    200.0,
                    250.0,
                    250.0,
                    500.0
                  ],
                  "ParticleSizeClay": [
                    20.0,
                    20.0,
                    20.0,
                    15.0,
                    10.0,
                    10.0
                  ],
                  "ParticleSizeSand": null,
                  "ParticleSizeSilt": null,
                  "Rocks": null,
                  "Texture": null,
                  "BD": [
                    1.3,
                    1.4,
                    1.5,
                    1.6,
                    1.45,
                    1.35
                  ],
                  "AirDry": [
                    0.05,
                    0.17,
                    0.19,
                    0.17,
                    0.1,
                    0.1
                  ],
                  "LL15": [
                    0.15,
                    0.17,
                    0.19,
                    0.17,
                    0.1,
                    0.1
                  ],
                  "DUL": [
                    0.36,
                    0.34,
                    0.33,
                    0.3,
                    0.2,
                    0.2
                  ],
                  "SAT": [
                    0.45,
                    0.42,
                    0.38,
                    0.36,
                    0.38,
                    0.39
                  ],
                  "KS": [
                    4500.0,
                    2500.0,
                    200.0,
                    1500.0,
                    5000.0,
                    10000.0
                  ],
                  "BDMetadata": null,
                  "AirDryMetadata": null,
                  "LL15Metadata": null,
                  "DULMetadata": null,
                  "SATMetadata": null,
                  "KSMetadata": null,
                  "RocksMetadata": null,
                  "TextureMetadata": null,
                  "ParticleSizeSandMetadata": null,
                  "ParticleSizeSiltMetadata": null,
                  "ParticleSizeClayMetadata": null,
                  "Name": "Physical",
                  "ResourceName": null,
                  "Children": [
                    {
                      "$type": "Models.Soils.SoilCrop, Models",
                      "LL": [
                        0.15,
                        0.17,
                        0.19,
                        0.17,
                        0.1,
                        0.1
                      ],
                      "KL": [
                        0.1,
                        0.08,
                        0.04,
                        0.01,
                        0.0,
                        0.0
                      ],
                      "XF": [
                        1.0,
                        1.0,
                        1.0,
                        1.0,
                        0.0,
                        0.0
                      ],
                      "LLMetadata": null,
                      "KLMetadata": null,
                      "XFMetadata": null,
                      "Name": "WhiteCloverSoil",
                      "ResourceName": null,
                      "Children": [],
                      "Enabled": true,
                      "ReadOnly": false
                    }
                  ],
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.WaterModel.WaterBalance, Models",
                  "SummerDate": "21-Sep",
                  "SummerU": 6.0,
                  "SummerCona": 3.5,
                  "WinterDate": "23-Mar",
                  "WinterU": 6.0,
                  "WinterCona": 2.5,
                  "DiffusConst": 88.0,
                  "DiffusSlope": 35.0,
                  "Salb": 0.2,
                  "CN2Bare": 0.7,
                  "CNRed": 20.0,
                  "CNCov": 0.8,
                  "DischargeWidth": "NaN",
                  "CatchmentArea": "NaN",
                  "PSIDul": -100.0,
                  "Thickness": [
                    150.0,
                    150.0,
                    200.0,
                    250.0,
                    250.0,
                    500.0
                  ],
                  "SWCON": [
                    0.45,
                    0.35,
                    0.1,
                    0.15,
                    0.3,
                    0.2
                  ],
                  "KLAT": null,
                  "Name": "SoilWater",
                  "ResourceName": "WaterBalance",
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Soils.Organic, Models",
                  "FOMCNRatio": 40.0,
                  "Thickness": [
                    150.0,
                    150.0,
                    200.0,
                    250.0,
                    250.0,
                    500.0
                  ],
                  "Carbon": [
                    2.5,
                    1.25,
                    0.5,
                    0.2,
                    0.15,
                    0.1
                  ],
                  "CarbonUnits": 0,
                  "SoilCNRatio": [
                    12.0,
                    12.0,
                    12.0,
                    12.0,
                    12.0,
                    12.0
                  ],
                  "FBiom": [
                    0.04,
                    0.025,
                    0.015,
                    0.01,
                    0.008,
                    0.008
                  ],
                  "FInert": [
                    0.4,
                    0.6,
                    0.8,
                    0.9,
                    0.95,
                    0.98
                  ],
                  "FOM": [
                    358.61744427798754,
                    265.6703369754438,
                    178.0841525116833,
                    108.01349850727648,
                    65.51349850748795,
                    24.10106922012079
                  ],
                  "CarbonMetadata": null,
                  "FOMMetadata": null,
                  "Name": "Organic",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Soils.Water, Models",
                  "Thickness": [
                    150.0,
                    150.0,
                    200.0,
                    250.0,
                    250.0,
                    500.0
                  ],
                  "InitialValues": [
                    0.339,
                    0.323,
                    0.316,
                    0.287,
                    0.19,
                    0.19
                  ],
                  "InitialPAWmm": 173.25,
                  "RelativeTo": "LL15",
                  "FilledFromTop": false,
                  "Name": "Water",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Soils.CERESSoilTemperature, Models",
                  "Name": "Temperature",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Soils.Nutrients.Nutrient, Models",
                  "Name": "Nutrient",
                  "ResourceName": "Nutrient",
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Soils.Solute, Models",
                  "Thickness": [
                    150.0,
                    150.0,
                    200.0,
                    250.0,
                    250.0,
                    500.0
                  ],
                  "InitialValues": [
                    9.433962264150944,
                    6.592929950119278,
                    3.6820973075106305,
                    2.1917808219178077,
                    2.1917808219178077,
                    0.7407407407407409
                  ],
                  "InitialValuesUnits": 0,
                  "WaterTableConcentration": 0.0,
                  "D0": 0.0,
                  "Exco": null,
                  "FIP": null,
                  "DepthConstant": 0.0,
                  "MaxDepthSoluteAccessible": 0.0,
                  "RunoffEffectivenessAtMovingSolute": 0.0,
                  "MaxEffectiveRunoff": 0.0,
                  "Name": "NO3",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Soils.Solute, Models",
                  "Thickness": [
                    150.0,
                    150.0,
                    200.0,
                    250.0,
                    250.0,
                    500.0
                  ],
                  "InitialValues": [
                    0.37735849056603776,
                    0.24072869225764482,
                    0.11360415682569673,
                    0.05479452054794518,
                    0.05479452054794524,
                    0.02962962962962962
                  ],
                  "InitialValuesUnits": 0,
                  "WaterTableConcentration": 0.0,
                  "D0": 0.0,
                  "Exco": null,
                  "FIP": null,
                  "DepthConstant": 0.0,
                  "MaxDepthSoluteAccessible": 0.0,
                  "RunoffEffectivenessAtMovingSolute": 0.0,
                  "MaxEffectiveRunoff": 0.0,
                  "Name": "NH4",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Soils.Solute, Models",
                  "Thickness": [
                    150.0,
                    150.0,
                    200.0,
                    250.0,
                    250.0,
                    500.0
                  ],
                  "InitialValues": [
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0
                  ],
                  "InitialValuesUnits": 1,
                  "WaterTableConcentration": 0.0,
                  "D0": 0.0,
                  "Exco": null,
                  "FIP": null,
                  "DepthConstant": 0.0,
                  "MaxDepthSoluteAccessible": 0.0,
                  "RunoffEffectivenessAtMovingSolute": 0.0,
                  "MaxEffectiveRunoff": 0.0,
                  "Name": "Urea",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                }
              ],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.PMF.Plant, Models",
              "Name": "WhiteClover",
              "ResourceName": "WhiteClover",
              "Children": [],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Report, Models",
              "VariableNames": [
                "[Clock].Today as Date",
                "",
                "[WhiteClover].Population",
                "[WhiteClover].PlantType",
                "[WhiteClover].Leaf.RadiationIntercepted as InterceptedRadiation",
                "",
                "[Irrigation].IrrigationApplied as IrrigationApplied",
                "[Soil].SoilWater.Es as Evaporation",
                "[WhiteClover].Leaf.Transpiration as Transpiration",
                "[Soil].SoilWater.Drainage as Drainage",
                "[Soil].SoilWater.Runoff as Runoff",
                "sum([Soil].Water.MM) as TotalSWC",
                "sum([Soil].Physical.DULmm) as TotalDUL",
                "sum([Soil].Physical.LL15mm) as TotalLL15",
                "[Fertiliser].NitrogenApplied as FertiliserN",
                "sum([Soil].Nutrient.Natm) as DenitrifiedN",
                "([Soil].SoilWater.LeachNH4 + [Soil].SoilWater.LeachNO3) as LeachedN",
                "(-1*[WhiteClover].Root.NUptake) as UptakeN",
                "(sum([Soil].Urea.kgha) + sum([Soil].NH4.kgha) + sum([Soil].NO3.kgha)) as SoilNContent",
                "",
                "[WhiteClover].Total.Wt",
                "[WhiteClover].AboveGround.Wt",
                "[WhiteClover].BelowGround.Wt",
                "[WhiteClover].Leaf.Live.NConc",
                "[WhiteClover].Leaf.LAI",
                "[WhiteClover].Leaf.Live.Wt",
                "[WhiteClover].Inflorescence.Live.Wt",
                "[WhiteClover].Taproot.Live.Wt",
                "[WhiteClover].Root.Live.Wt",
                "",
                "[Defoliate].Script.DefoliatedDM as HarvestedWt"
              ],
              "EventNames": [
                "[Clock].DoReport"
              ],
              "GroupByVariableName": null,
              "Name": "Report",
              "ResourceName": null,
              "Children": [],
              "Enabled": true,
              "ReadOnly": false
            }
          ],
          "Enabled": true,
          "ReadOnly": false
        },
        {
          "$type": "Models.Graph, Models",
          "Caption": null,
          "Axis": [
            {
              "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
              "Title": "Date",
              "Position": 3,
              "Inverted": false,
              "CrossesAtZero": false,
              "LabelOnOneLine": false,
              "Minimum": null,
              "Maximum": null,
              "Interval": null
            },
            {
              "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
              "Title": null,
              "Position": 0,
              "Inverted": false,
              "CrossesAtZero": false,
              "LabelOnOneLine": false,
              "Minimum": null,
              "Maximum": null,
              "Interval": null
            }
          ],
          "LegendPosition": 0,
          "LegendOrientation": 0,
          "AnnotationLocation": 0,
          "DisabledSeries": [],
          "LegendOutsideGraph": false,
          "Name": "Biomass",
          "ResourceName": null,
          "Children": [
            {
              "$type": "Models.Series, Models",
              "Type": 1,
              "XAxis": 3,
              "YAxis": 0,
              "ColourArgb": -16777216,
              "FactorToVaryColours": null,
              "FactorToVaryMarkers": null,
              "FactorToVaryLines": null,
              "Marker": 11,
              "MarkerSize": 0,
              "Line": 1,
              "LineThickness": 0,
              "TableName": "Report",
              "XFieldName": "Date",
              "YFieldName": "WhiteClover.Total.Wt",
              "X2FieldName": "",
              "Y2FieldName": "",
              "ShowInLegend": true,
              "IncludeSeriesNameInLegend": false,
              "Cumulative": false,
              "CumulativeX": false,
              "Filter": null,
              "Name": "Total",
              "ResourceName": null,
              "Children": [],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Series, Models",
              "Type": 1,
              "XAxis": 3,
              "YAxis": 0,
              "ColourArgb": -16736653,
              "FactorToVaryColours": null,
              "FactorToVaryMarkers": null,
              "FactorToVaryLines": null,
              "Marker": 11,
              "MarkerSize": 0,
              "Line": 0,
              "LineThickness": 0,
              "TableName": "Report",
              "XFieldName": "Date",
              "YFieldName": "WhiteClover.AboveGround.Wt",
              "X2FieldName": "",
              "Y2FieldName": "",
              "ShowInLegend": true,
              "IncludeSeriesNameInLegend": false,
              "Cumulative": false,
              "CumulativeX": false,
              "Filter": null,
              "Name": "AboveGround",
              "ResourceName": null,
              "Children": [],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Series, Models",
              "Type": 1,
              "XAxis": 3,
              "YAxis": 0,
              "ColourArgb": -2793984,
              "FactorToVaryColours": null,
              "FactorToVaryMarkers": null,
              "FactorToVaryLines": null,
              "Marker": 11,
              "MarkerSize": 0,
              "Line": 0,
              "LineThickness": 0,
              "TableName": "Report",
              "XFieldName": "Date",
              "YFieldName": "WhiteClover.BelowGround.Wt",
              "X2FieldName": "",
              "Y2FieldName": "",
              "ShowInLegend": true,
              "IncludeSeriesNameInLegend": false,
              "Cumulative": false,
              "CumulativeX": false,
              "Filter": null,
              "Name": "BelowGround",
              "ResourceName": null,
              "Children": [],
              "Enabled": true,
              "ReadOnly": false
            }
          ],
          "Enabled": true,
          "ReadOnly": false
        },
        {
          "$type": "Models.Graph, Models",
          "Caption": null,
          "Axis": [
            {
              "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
              "Title": "Date",
              "Position": 3,
              "Inverted": false,
              "CrossesAtZero": false,
              "LabelOnOneLine": false,
              "Minimum": null,
              "Maximum": null,
              "Interval": null
            },
            {
              "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
              "Title": null,
              "Position": 0,
              "Inverted": false,
              "CrossesAtZero": false,
              "LabelOnOneLine": false,
              "Minimum": null,
              "Maximum": null,
              "Interval": null
            }
          ],
          "LegendPosition": 0,
          "LegendOrientation": 0,
          "AnnotationLocation": 0,
          "DisabledSeries": [],
          "LegendOutsideGraph": false,
          "Name": "PlantParts",
          "ResourceName": null,
          "Children": [
            {
              "$type": "Models.Series, Models",
              "Type": 1,
              "XAxis": 3,
              "YAxis": 0,
              "ColourArgb": -16736653,
              "FactorToVaryColours": null,
              "FactorToVaryMarkers": null,
              "FactorToVaryLines": null,
              "Marker": 11,
              "MarkerSize": 0,
              "Line": 0,
              "LineThickness": 0,
              "TableName": "Report",
              "XFieldName": "Date",
              "YFieldName": "WhiteClover.Leaf.Live.Wt",
              "X2FieldName": "",
              "Y2FieldName": "",
              "ShowInLegend": true,
              "IncludeSeriesNameInLegend": false,
              "Cumulative": false,
              "CumulativeX": false,
              "Filter": null,
              "Name": "Leaf",
              "ResourceName": null,
              "Children": [],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Series, Models",
              "Type": 1,
              "XAxis": 3,
              "YAxis": 0,
              "ColourArgb": -16777216,
              "FactorToVaryColours": null,
              "FactorToVaryMarkers": null,
              "FactorToVaryLines": null,
              "Marker": 11,
              "MarkerSize": 0,
              "Line": 2,
              "LineThickness": 0,
              "TableName": "Report",
              "XFieldName": "Date",
              "YFieldName": "WhiteClover.Stem.Live.Wt",
              "X2FieldName": "",
              "Y2FieldName": "",
              "ShowInLegend": true,
              "IncludeSeriesNameInLegend": false,
              "Cumulative": false,
              "CumulativeX": false,
              "Filter": null,
              "Name": "Stem",
              "ResourceName": null,
              "Children": [],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Series, Models",
              "Type": 1,
              "XAxis": 3,
              "YAxis": 0,
              "ColourArgb": -11094807,
              "FactorToVaryColours": null,
              "FactorToVaryMarkers": null,
              "FactorToVaryLines": null,
              "Marker": 11,
              "MarkerSize": 0,
              "Line": 0,
              "LineThickness": 0,
              "TableName": "Report",
              "XFieldName": "Date",
              "YFieldName": "WhiteClover.Inflorescence.Live.Wt",
              "X2FieldName": "",
              "Y2FieldName": "",
              "ShowInLegend": true,
              "IncludeSeriesNameInLegend": false,
              "Cumulative": false,
              "CumulativeX": false,
              "Filter": null,
              "Name": "Inflorescence",
              "ResourceName": null,
              "Children": [],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Series, Models",
              "Type": 1,
              "XAxis": 3,
              "YAxis": 0,
              "ColourArgb": -990142,
              "FactorToVaryColours": null,
              "FactorToVaryMarkers": null,
              "FactorToVaryLines": null,
              "Marker": 11,
              "MarkerSize": 0,
              "Line": 0,
              "LineThickness": 0,
              "TableName": "Report",
              "XFieldName": "Date",
              "YFieldName": "WhiteClover.Taproot.Live.Wt",
              "X2FieldName": "",
              "Y2FieldName": "",
              "ShowInLegend": true,
              "IncludeSeriesNameInLegend": false,
              "Cumulative": false,
              "CumulativeX": false,
              "Filter": null,
              "Name": "Taproot",
              "ResourceName": null,
              "Children": [],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Series, Models",
              "Type": 1,
              "XAxis": 3,
              "YAxis": 0,
              "ColourArgb": -2793984,
              "FactorToVaryColours": null,
              "FactorToVaryMarkers": null,
              "FactorToVaryLines": null,
              "Marker": 11,
              "MarkerSize": 0,
              "Line": 0,
              "LineThickness": 0,
              "TableName": "Report",
              "XFieldName": "Date",
              "YFieldName": "WhiteClover.Root.Live.Wt",
              "X2FieldName": "",
              "Y2FieldName": "",
              "ShowInLegend": true,
              "IncludeSeriesNameInLegend": false,
              "Cumulative": false,
              "CumulativeX": false,
              "Filter": null,
              "Name": "Root",
              "ResourceName": null,
              "Children": [],
              "Enabled": true,
              "ReadOnly": false
            }
          ],
          "Enabled": true,
          "ReadOnly": false
        },
        {
          "$type": "Models.Graph, Models",
          "Caption": null,
          "Axis": [
            {
              "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
              "Title": "Date",
              "Position": 3,
              "Inverted": false,
              "CrossesAtZero": false,
              "LabelOnOneLine": false,
              "Minimum": null,
              "Maximum": null,
              "Interval": null
            },
            {
              "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
              "Title": null,
              "Position": 0,
              "Inverted": false,
              "CrossesAtZero": false,
              "LabelOnOneLine": false,
              "Minimum": null,
              "Maximum": null,
              "Interval": null
            },
            {
              "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
              "Title": null,
              "Position": 2,
              "Inverted": false,
              "CrossesAtZero": false,
              "LabelOnOneLine": false,
              "Minimum": null,
              "Maximum": null,
              "Interval": null
            }
          ],
          "LegendPosition": 0,
          "LegendOrientation": 0,
          "AnnotationLocation": 0,
          "DisabledSeries": [],
          "LegendOutsideGraph": false,
          "Name": "Harvests",
          "ResourceName": null,
          "Children": [
            {
              "$type": "Models.Series, Models",
              "Type": 1,
              "XAxis": 3,
              "YAxis": 0,
              "ColourArgb": -16736653,
              "FactorToVaryColours": null,
              "FactorToVaryMarkers": null,
              "FactorToVaryLines": null,
              "Marker": 11,
              "MarkerSize": 0,
              "Line": 0,
              "LineThickness": 0,
              "TableName": "Report",
              "XFieldName": "Date",
              "YFieldName": "HarvestedWt",
              "X2FieldName": "",
              "Y2FieldName": "",
              "ShowInLegend": true,
              "IncludeSeriesNameInLegend": false,
              "Cumulative": false,
              "CumulativeX": false,
              "Filter": null,
              "Name": "Events",
              "ResourceName": null,
              "Children": [],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Series, Models",
              "Type": 1,
              "XAxis": 3,
              "YAxis": 2,
              "ColourArgb": -16777216,
              "FactorToVaryColours": null,
              "FactorToVaryMarkers": null,
              "FactorToVaryLines": null,
              "Marker": 11,
              "MarkerSize": 0,
              "Line": 0,
              "LineThickness": 0,
              "TableName": "Report",
              "XFieldName": "Date",
              "YFieldName": "HarvestedWt",
              "X2FieldName": "",
              "Y2FieldName": "",
              "ShowInLegend": true,
              "IncludeSeriesNameInLegend": false,
              "Cumulative": true,
              "CumulativeX": false,
              "Filter": null,
              "Name": "Cumulative",
              "ResourceName": null,
              "Children": [],
              "Enabled": true,
              "ReadOnly": false
            }
          ],
          "Enabled": true,
          "ReadOnly": false
        },
        {
          "$type": "Models.Graph, Models",
          "Caption": null,
          "Axis": [
            {
              "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
              "Title": "Date",
              "Position": 3,
              "Inverted": false,
              "CrossesAtZero": false,
              "LabelOnOneLine": false,
              "Minimum": null,
              "Maximum": null,
              "Interval": null
            },
            {
              "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
              "Title": null,
              "Position": 0,
              "Inverted": false,
              "CrossesAtZero": false,
              "LabelOnOneLine": false,
              "Minimum": null,
              "Maximum": null,
              "Interval": null
            }
          ],
          "LegendPosition": 0,
          "LegendOrientation": 0,
          "AnnotationLocation": 0,
          "DisabledSeries": [],
          "LegendOutsideGraph": false,
          "Name": "Water",
          "ResourceName": null,
          "Children": [
            {
              "$type": "Models.Series, Models",
              "Type": 1,
              "XAxis": 3,
              "YAxis": 0,
              "ColourArgb": -16747854,
              "FactorToVaryColours": null,
              "FactorToVaryMarkers": null,
              "FactorToVaryLines": null,
              "Marker": 11,
              "MarkerSize": 0,
              "Line": 0,
              "LineThickness": 0,
              "TableName": "Report",
              "XFieldName": "Date",
              "YFieldName": "TotalSWC",
              "X2FieldName": "",
              "Y2FieldName": "",
              "ShowInLegend": true,
              "IncludeSeriesNameInLegend": false,
              "Cumulative": false,
              "CumulativeX": false,
              "Filter": null,
              "Name": "WaterContent",
              "ResourceName": null,
              "Children": [],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Series, Models",
              "Type": 1,
              "XAxis": 3,
              "YAxis": 0,
              "ColourArgb": -16777216,
              "FactorToVaryColours": null,
              "FactorToVaryMarkers": null,
              "FactorToVaryLines": null,
              "Marker": 11,
              "MarkerSize": 0,
              "Line": 0,
              "LineThickness": 0,
              "TableName": "Report",
              "XFieldName": "Date",
              "YFieldName": "TotalDUL",
              "X2FieldName": "",
              "Y2FieldName": "",
              "ShowInLegend": true,
              "IncludeSeriesNameInLegend": false,
              "Cumulative": false,
              "CumulativeX": false,
              "Filter": null,
              "Name": "DUL",
              "ResourceName": null,
              "Children": [],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Series, Models",
              "Type": 1,
              "XAxis": 3,
              "YAxis": 0,
              "ColourArgb": -2793984,
              "FactorToVaryColours": null,
              "FactorToVaryMarkers": null,
              "FactorToVaryLines": null,
              "Marker": 11,
              "MarkerSize": 0,
              "Line": 0,
              "LineThickness": 0,
              "TableName": "Report",
              "XFieldName": "Date",
              "YFieldName": "TotalLL15",
              "X2FieldName": "",
              "Y2FieldName": "",
              "ShowInLegend": true,
              "IncludeSeriesNameInLegend": false,
              "Cumulative": false,
              "CumulativeX": false,
              "Filter": null,
              "Name": "LL15",
              "ResourceName": null,
              "Children": [],
              "Enabled": true,
              "ReadOnly": false
            }
          ],
          "Enabled": true,
          "ReadOnly": false
        }
      ],
      "Enabled": true,
      "ReadOnly": false
    }
  ],
  "Enabled": true,
  "ReadOnly": false
}